(Object-base) เป็นแนวคิดในการเขียนโปรแกรมเลียนแบบวัตถุในชีวิตจริง  
Class (คลาส): เป็นแบบแผนหรือรูปแบบของ Object ที่กำหนดลักษณะและพฤติกรรมของ Object นั้น ๆ.
Object (ออบเจกต์): เป็นตัวแทนของ Class ที่มีส่วนประกอบที่กำหนดโดย Class. 
โดยมีความสามารถในการโต้ตอบกับโปรแกรมอื่นๆ ผ่านเมทอด (methods) ที่กำหนดไว้
มีหลักการสำคัญ ได้แก่ 
-Encapsulation หมายถึงการจำกัดการเข้าถึงข้อมูล (attributes) methods ของ
 Object ใน Class โดยให้มีการเข้าถึงและการใช้งานผ่านMethods ที่ถูกกำหนดไว้ 
 สามารถช่วยให้มีความปลอดภัยของข้อมูล ป้องกันไม่ให้ข้อมูลภายในถูกเปลี่ยนแปลงโดยตรงจากภายนอก 
 และจะมีเริ่องของการปกปิดการทำงานภายในmethods เพราะว่าในบางครั้งผู้ใช้ก็ไม่จำเป็นต้องรู้ว่าข้างในทำงานยังไง
-Inheritance ช่วยให้ Class สามารถสืบทอดคุณสมบัติ (attributes และ methods) 
จาก Class อื่น ๆ ได้. Class ที่สืบทอดเรียกว่า Subclass  
และ Class ที่ถูกสืบทอดเรียกว่า Superclass หรือ Base Class
ช่วยในการลดการซ้ำซ้อนของโค้ดและทำให้โค้ดมีโครงสร้างที่ยืดหยุ่นทำให้สามารถใช้งานโค้ดซ้ำได้
-Polymorphism วัตถุสามารถมีพฤติกรรมที่แตกต่างกันได้ในบางกรณี โดยใช้ชื่อเดียวกัน
	-overload แบบ Compile-time คือการสร้างเมทอดที่มีชื่อเดียวกันแต่พารามิเตอร์ต่างกัน 
    ใช้เพื่อให้มีการใช้งานฟังก์ชันที่ยืดหยุ่น ฟังก์ชันชื่อเดียวทำได้หลายอย่าง 
	-override Runtime เป็นการเขียนทับเมทอดที่ถูกสืบทอดมาจากคลาสแม่ 
    เพื่อให้มีการทำงานที่แตกต่างในคลาสลูก
-Abstraction การซ่อนรายละเอียดภายในของ Object และเฉพาะเน้นที่สิ่งที่สำคั
-Association หมายถึงความสัมพันธ์ระหว่าง Object ซึ่งสามารถเป็น 
Unidirectional หรือ Bidirectional กันได้
-Composition หมายถึงการสร้าง Object ใหม่จาก Object อื่น ๆ 
โดยเกิดความเชื่อมโยงแบบแรกเข้ากับ Object ที่สร้าง
ช่วยในการสร้างโครงสร้างของ Object ที่มีความซับซ้อน
ข้อเสีย
-Inheritance อาจทำให้เกิด overhead ในการดำเนินการและการเรียกใช้เมทอด, 
ซึ่งสามารถทำให้กระบวนการทำงานล่าช้าลง
-การใช้ Polymorphism อาจทำให้ไม่ชัดเจนในกรณีที่มีการ override เมทอดมากมาย
โดยในการพัฒนา oop จะขึ้นอยู่กับภาษาที่ใช้ เช่น ใน java และ c# จะไม่มีคุณสมบัติในการทำ multiple inheritance

 (Component-Based ) ต่อยอดมาจาก oop เพื่อทำให้การต่อยอด และการนำมาใช้ใหม่สามารถทำได้สะดวกขึ้น  
 โดยในการใช้งาน Component ผู้พัฒนาไม่จำเป็นต้องเปิดคู่มือดูเลย
 Component คือส่วนประกอบของซอฟต์แวร์ที่ถูกสร้างขึ้นในรูปแบบของโมดูลที่มีความเป็นอิสระ 
 สามารถใช้งานได้ทันทีโดยไม่ต้องรู้รายละเอียดภายใน
 มักประกอบด้วยโค้ด, ข้อมูล, และอื่น ๆ ที่เกี่ยวข้องที่ถูกบรรจุเข้าไปในหน่วยเดียวกัน 
 เราสามารถออกแบบและพัฒนาแต่ละองค์ประกอบแยกกัน 
 และนำมารวมเข้าด้วยกันเพื่อสร้างระบบที่ใหญ่ขึ้นได้
 ผู้พัฒนาสามารถนำองค์ประกอบมาใช้ในโปรเจ็กต์หรือระบบอื่น ๆ โดยไม่ต้องพัฒนาใหม่
 เพื่อลดเวลาและความซับซ้อนในการพัฒนา
การสร้างระบบโดยใช้Componentทำให้ระบบสามารถขยายขนาดได้ตามความต้องการของระบบ
ในส่วนของการปรับปรุงแก้ไขก็ทำได้ง่ายเนื่องจากองค์ประกอบมีขอบเขตการทำงานที่ชัดเจน
 โดยการพัฒนาComponent จะไม่ขึ้นขึ้นกับภาษาที่ใช้ แต่จะขึ้นกับ component tecnology 
 เช่น Java EE โดยมี JPA เป็นเทคโนโลยีที่ใช้ในการพัฒนา component 
 หรือส่วนหนึ่งของโปรแกรมในภาษา Java ที่เกี่ยวข้องกับการจัดการข้อมูลในฐานข้อมูล
 มีส่วนช่วยในการจัดการกับการจัดเก็บข้อมูลลงในฐานข้อมูลโดยให้นักพัฒนาสามารถทำงานกับข้อมูลในรูปแบบ Object 
 และ Class ที่มีความสัมพันธ์กับข้อมูลในฐานข้อมูลได้ โดยไม่ต้องเขียน SQL โดยตรง 
 มีServlet เป็น component ที่ถูกใช้ในการจัดการกับคำขอและการตอบสนองที่เกิดขึ้นในเว็บแอปพลิเคชัน Java EE  


Services จะต่อยอดมาจากComponent โดยมีแนวคิดคือการแยก interface กับ implementation ออกจากกัน 
ทำให้การเปลี่ยนแปลงแก้ไข implementation จะไม่ส่งผลกระทบกับผู้เรียกใช้ และ Services 
จะไม่ขึ้นกับเทคโนโลยี หรือเเพลตฟอร์มใดๆเลย 
แต่ละServicesสามารถทำงานอิสระโดยไม่ต้องมีความขึ้นต่อกันมากนัก
โดยในการใช้งานจะเรียกใช้งานได้ผ่าน network และ interface
ในการจะใช้งานจะต้องรุ้แค่ว่ามี methods อะไรให้ใช้บ้าง และมีการส่งพารามิเตอร์เป็นอะไร
มักจะมีข้อกำหนดเพื่อให้เกิดการติดต่อสื่อสารได้ ซึ่งอาจเป็นการใช้โปรโตคอลหรือมาตรฐานที่กำหนดไว้
ในการสือ่สารของ web Services  นิยมคุยกันผ่าน http โดยมีข้อมูลที่แลกเปลียนกันเป็นไฟล์ประเภท text 
เช่น xml หรือ json
โดยจะแปลงการเรียก method และ paramitor เป็นรูปแบบ text ทั้งหมด
Services สามารถถูกนำไปใช้งานได้ทันทีโดยไม่ต้องการกระบวนการติดตั้งที่ซับซ้อน.
โปรโตคอลสำหรับการแลกเปลี่ยนข้อมูลที่นิยมก็อย่างเช่น soap และ restful web service 
สำหรับsoap SOAP ไม่ขึ้นต่อกับโปรโตคอลเฉพาะใด ๆ, ทำให้สามารถใช้งานได้บนหลายโปรโตคอล 
เช่น HTTP, SMTP, TCP, หรืออื่น ๆ
ข้อมูลทั้งหมดใน SOAP ถูกส่งผ่านเครือข่ายในรูปแบบ XML
RESTfulเป็นรูปแบบการออกแบบและการสร้างเว็บเซอร์วิส 
ที่ให้บริการแบบมีประสิทธิภาพและยืดหยุ่นในการสื่อสารระหว่างคอมพิวเตอร์ที่ต่อกันผ่านเครือข่าย
ใช้ HTTP เป็นโปรโตคอลในการส่งข้อมูลและให้การเข้าถึงข้อมูลผ่าน URL
 Resource ถูกแสดงผลได้ในหลายรูปแบบ เช่น JSON, XML, HTML.

สรุปก็คือ Object-base จัดการกับObject มักใช้การโต้ตอบระหว่างObjectภายในโปรแกรมเดียวกัน 
และจบที่เครื่องผู้พัฒนา
Component-Based ต่อยอดมาจาก oop Component มีขนาดใหญ่กว่า 
ในการพัฒนาจะต้องคำนึงถึงตอน deploy ที่เครื่องผู้ใช้ด้วย
มีความสามารถในการรวมกลุ่มของวัตถุและฟังก์ชันที่เกี่ยวข้อง สื่อสารกันผ่านอินเทอร์เฟซที่กำหนดไว้
Services มีขนาดใหญ่และเป็นอิสระมากที่สุด สื่อสารผ่านเครือข่าย โดยใช้โปรโตคอลหรือมาตรฐานที่กำหนด
